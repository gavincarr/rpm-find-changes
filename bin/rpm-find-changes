#!/usr/bin/perl
#
# rpm-find-changes - report files in a tree whose contents have changed from 
#   their rpm versions, or are not owned by any package. It is intended to 
#   help identify candidate files for backup.
#

use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
use File::Basename;
use File::Find::Rule;
use File::Slurp qw(slurp);
use IPC::Run3;
use IO::File;
use Digest::MD5;

sub usage {
  die "usage: " . basename($0) . " [-v] [-m|-o] [-t] [--exclude=<glob>] [--exclude-from=<file>] [-O <outfile>] <path1> [<path2> ...]\n";
}

my ($help, @verbose, $show_type, @exclude, @exclude_pkg, @exclude_from);
my ($show_modified, $show_orphans, $output, @only_files);
usage unless GetOptions(
  'help|h|?'                => \$help,
  'verbose|v'               => \@verbose,
  'show-type|type|t'        => \$show_type,
  'exclude|x=s@'            => \@exclude,
  'exclude-package|exclude-pkg=s@'   => \@exclude_pkg,
  'exclude-from=s@'         => \@exclude_from,
  'show-modified|m'         => \$show_modified,
  'show-orphans|o'          => \$show_orphans,
  'output|O=s'              => \$output,
  'only=s@'                 => \@only_files,
);
usage if $help || ! @ARGV;

# Argument foo
push @exclude, qw(*.rpmnew *.rpmsave);
# Default is show both orphans and modified files
$show_modified = $show_orphans = 1 unless $show_modified || $show_orphans;
my %only_files = map { $_ => 1 } @only_files;
# Check paths are valid
-d $_ or die "Invalid path '$_'\n" foreach @ARGV;

my %package = ();
my %changed_file = ();
my $exclude_pkg = setup_excludes(\@exclude, \@exclude_pkg, \@exclude_from);

# Iterate over all files in the given trees
FILE: for my $file ( File::Find::Rule->file()->in( @ARGV ) ) {

  # If @only_files is set, skip everything else
  next if @only_files and ! exists $only_files{$file};

  # Exclusions
  for (@exclude) { 
    next FILE if $file =~ m/$_/;
  }

  print STDERR "++ checking file $file\n" if @verbose >= 2;

  # If file is owned by a package, add to the %package hash
  if (my @pkg = find_package_for_file($file)) {
    add_packages(\%package, $file, $exclude_pkg, @pkg);
  }

  # Otherwise it's an orphan
  else {
    $changed_file{ $file } = 'O' if $show_orphans;
  }
}

# Verify files by manually checking the rpm checksums - rpm -V omits files we care about
if ($show_modified) {
  for my $pkg (keys %package) {
    print STDERR "+ verifying package $pkg\n" if @verbose;

    # Run the verify
    my %rpm_checksums = get_rpm_checksums($pkg);

    for my $file (@{$package{$pkg}}) {
      $changed_file{$file} = 'M'
        unless checksums_match($file, $rpm_checksums{ $file });
    }
  }
}

# Report results
my $outh = $output ? 
  IO::File->new($output, O_WRONLY|O_CREAT|O_TRUNC, 0600) :
  IO::Handle->new->fdopen(fileno(STDOUT), "w") 
    or die "opening output failed: $!";
for my $file (sort keys %changed_file) {
  if ($show_type) {
    printf $outh "%s %s\n", $changed_file{$file}, $file;
  }
  else {
    printf $outh "$file\n";
  }
}


# ------------------------------------------------------------------------------
# Subroutines

sub setup_excludes {
  my ($exclude, $exclude_pkg, $exclude_from) = @_;

  # Load exclude-froms
  for (@$exclude_from) {
    unless (-f $_) {
      print STDERR "Error: invalid exclude file '$_': $!\n";
      next;
    }
    my $ef = slurp $_;
    chomp $ef;
    unshift @$exclude, grep { /^[^@]\S/ } split /\n/, $ef;
    unshift @$exclude_pkg, map { s/^@//; $_ } grep { /^[@]\S/ } split /\n/, $ef;
  }
  my %exclude_pkg = map { $_ => 1 } @$exclude_pkg;

  # Turn excludes into regexes
  for (@exclude) {
    # If no wildchars characters and no slashes, treat as a basename filename to match
    if (! m/\*/ && ! m!/!) {
      $_ = "/$_\$";
    }
    else {
      # Explicitly anchor if absolute
      s/^/^/ if m!^/!;
      # If no slashes, assume it matches the whole path, and anchor both ends
      if (! m{/}) {
        s/^/^/ unless m/^\^/;
        s/$/\$/ unless m/\$$/;
      }
      # Map . to \. if not already escaped
      s/(?<!\\)\./\\./g;
      # Map * into .*
      s/\*/.*/g;
    }
  }

  return \%exclude_pkg;
}

# Return a list of packages owning this file (there can be more than one!)
my $db;
sub find_package_for_file {
  my ($file) = @_;

  if (! defined $db) {
    $db = eval { require RPM2; RPM2->open_rpm_db };
    $db ||= 0;
  }

  if ($db) {
    return map { $_->name } $db->find_by_file($file);
  }
  else {
    # Fall back to 'rpm -qf' if no RPM2
    my $pkg;
    run3( [ 'rpm', '-qf', $file ], undef, \$pkg, undef);
    my $rc = $? >> 8;
    if ($rc == 0) {
      # Remove version/release components
      chomp $pkg;
      $pkg =~ s/-[^-]+$//;
      $pkg =~ s/-[^-]+$//;
      return ($pkg);
    }
  }
}

sub add_packages {
  my ($packages, $file, $exclude_pkg, @pkg) = @_;

  # Add file to list for $pkg
  for my $pkg (@pkg) {
    if ($exclude_pkg->{$pkg}) {
      print STDERR "++ $pkg excluded - skipping\n" if @verbose >= 2;
      next;
    }

    $packages->{$pkg} ||= [];
    push @{$packages->{$pkg}}, $file;
  }
}
  
sub get_rpm_checksums {
  my ($pkg) = @_;
  my $out;
  run3( [ qw(rpm -q --queryformat), '[%{FILENAMES} %{FILEMD5S}\n]', $pkg ], undef, \$out, undef );
  chomp $out;
  die "Error: no files returned for rpm -qf on pkg $pkg\n" unless $out;
  return map { split /\s+/, $_, 2 } split(/\n/, $out);
}

my $md5;
sub checksums_match {
  my ($file, $expected) = @_;

  # If no checksum given, treat as modified
  return 0 if ! $expected;

  # Calculate checksum and check
  $md5 ||= Digest::MD5->new;
  my $fh = IO::File->new( $file, 'r' )
    or die "Error: cannot read file '$file' to calculate checksum - aborting\n";
  binmode $fh;
  my $checksum = $md5->addfile($fh)->hexdigest;
  return $checksum eq $expected;
}

__END__

=head1 NAME

rpm-find-changes - script to report files in a tree whose contents have changed 
from their rpm versions, or which are not owned by and package. It is intended
to help identify candidate files for backup.

=head1 SYNOPSIS

  rpm-find-changes [-m|-o] [-t] [-v] [<exclude-args>] <path1> [<path2> ...]

=head1 DESCRIPTION

=head2 ARGUMENTS

The following arguments are supported:

=over 4

=item -m | --show-modified

=item -o | --show-orphans

=item -t | --type

Identify the type of each reported file by preceding it with either an 'M',
for modified files, or an 'O', for orphans.

=item -x | --exclude=<file>

=item --exclude-package | --exclude-pkg=<package>

=item --exclude-from=<listfile>

=item -O | --output=<outputfile>

=back

=head1 AUTHOR

Gavin Carr <gavin@openfusion.com.au>.

=head1 COPYRIGHT

Copyright (C) 2007-2009 Gavin Carr. All rights reserved.

This is free software.  You may redistribute copies of it under the  terms  of  the  GNU
General Public License <http://www.gnu.org/licenses/gpl.html>.  There is NO WARRANTY, to
the extent permitted by law.

=cut

