#!/usr/bin/perl
#
# rpm-find-changes - report files in a tree whose contents have changed from 
#   their rpm versions, or are not owned by any package. It is intended to 
#   help identify candidate files for backup.
#

use strict;
use Getopt::Long qw(:config no_ignore_case bundling);
use File::Basename;
use File::Find::Rule;
use File::Slurp qw(slurp);
use IPC::Run3;
use IO::File;

local $SIG{INT} = sub { die "Punt!\n" };

my ($help, @verbose, $type, @exclude, @exclude_pkg, @exclude_from);
my ($show_modified, $show_orphans, $output, $manual_verify, @only_files);
GetOptions(
  'help|h|?'                => \$help,
  'verbose|v'               => \@verbose,
  'type|t'                  => \$type,
  'exclude|x=s@'            => \@exclude,
  'exclude-package|exclude-pkg=s@'   => \@exclude_pkg,
  'exclude-from=s@'         => \@exclude_from,
  'show-modified|m'         => \$show_modified,
  'show-orphans|o'          => \$show_orphans,
  'output|O=s'              => \$output,
  'manual-verify'           => \$manual_verify,
  'only=s@'                 => \@only_files,
);
push @exclude, qw(*.rpmnew *.rpmsave);
# Default is show both
$show_modified = $show_orphans = 1 unless $show_modified || $show_orphans;
my %only_files = map { $_ => 1 } @only_files;

if ($help || @ARGV != 1) {
  die "usage: " . basename($0) . " [-v] [-m|-o] [-t] [--exclude=<glob>] [--exclude-from=<file>] <path1> [<path2> ...]\n";
}

# Setup $out handle
my $outh;
if ($output) {
  $outh = IO::File->new($output, O_WRONLY|O_CREAT|O_TRUNC, 0600) or die "opening output '$output' failed: $!";
}
else {
  $outh = IO::Handle->new->fdopen(fileno(STDOUT), "w") or die "cloning STDOUT failed: $!";
} 

# Load exclude-froms
for (@exclude_from) {
  unless (-f $_) {
    print STDERR "Error: invalid exclude file '$_': $!\n";
    next;
  }
  my $ef = slurp $_;
  chomp $ef;
  unshift @exclude, grep { /^[^@]\S/ } split /\n/, $ef;
  unshift @exclude_pkg, map { s/^@//; $_ } grep { /^[@]\S/ } split /\n/, $ef;
}

# Turn excludes into regexes
for (@exclude) {
  # If no wildchars characters and no slashes, we treat as a filename to match
  if (! m/\*/ && ! m!/!) {
    $_ = "/$_\$";
  }
  else {
    # Explicitly anchor if absolute
    s/^/^/            if m!^/!;
    # Map . to \. if not already escaped
    s/(?<!\\)\./\\./g;
    # Map * into .*
    s/\*/.*/g;
  }
}

# Check paths are valid
for (@ARGV) {
  die "Invalid path '$_'\n" unless -d $_;
}

my $db;
# Use RPM2 if available
eval {
  require RPM2;
  $db = RPM2->open_rpm_db or die "opening rpm database failed: $!\n";
};
my %package = ();

# Iterate over all files in the given trees
FILE: for my $file ( File::Find::Rule->file()->in( @ARGV ) ) {
  if (@only_files) {
    next unless exists $only_files{$file};
  }
  # Exclusions
  for (@exclude) { 
    next FILE if $file =~ m/$_/;
  }

  print STDERR "++ checking file $file\n" if @verbose >= 2;

  # If file is owned by a package, add to the %package hash
  my @pkg;
  if ($db) {
    if (@pkg = $db->find_by_file($file)) {
      next FILE unless $show_modified;

      for my $pkg (@pkg) {
        # Add file to list for $pkg
        my $pname = $pkg->name;
        $package{$pname} ||= [];
        push @{$package{$pname}}, $file;
      }
    }
    # Orphan file - not owned by any package
    elsif ($show_orphans) {
      print STDERR "+ file '$file' is an orphan\n" if @verbose;
      printf $outh "%s%s\n", $type ? 'O ' : '', $file;
    }
    next FILE;
  }
  
  # Fall back to 'rpm -qf' if RPM2 not installed
  my ($pkg, $err);
  my @cmd = ( qw(rpm -qf), $file );
  run3(\@cmd, undef, \$pkg, \$err);
  my $rc = $? >> 8;
  chomp $pkg;
  if ($rc == 0) {
    # Remove version/release components
    $pkg =~ s/-[^-]+$//;
    $pkg =~ s/-[^-]+$//;
    $package{$pkg} ||= [];
    push @{$package{$pkg}}, $file;
  }

  # Orphan file - not owned by any package
  elsif ($show_orphans) {
    print STDERR "+ file '$file' is an orphan\n" if @verbose;
    printf $outh "%s%s\n", $type ? 'O ' : '', $file;
  }
}

# Package verification doesn't seem to be supported - call out to rpm -V manually for now
my %exclude_pkg = map { $_ => 1 } @exclude_pkg;
if ($show_modified && keys %package) {
  my $rpm_version = qx(rpm --version);
  chomp $rpm_version;
  $rpm_version =~ s/^rpm version //i;

  my @rpm_cmd = qw(rpm -V --nouser --nogroup --nomtime --nomode --nordev --nodeps --nodigest --noscripts);
  push @rpm_cmd, '--nosignature' unless $rpm_version && $rpm_version < '4.1';

  for my $pkg (keys %package) {
    print STDERR "+ verifying package $pkg\n" if @verbose;
    if ($exclude_pkg{$pkg}) {
      print STDERR "++ excluded - skipping package $pkg\n" if @verbose >= 2;
      next;
    }
    my ($out, $err);

    # Run the verify
    if ($manual_verify) {
      run3( [ qw(rpm -q --queryformat), '[%{FILENAMES} %{FILEMD5S}\n]', $pkg ], undef, \$out, \$err );
      die "No files returned for rpm -qf on pkg $pkg\n" unless $out;
      chomp $out;
      my %rpm_checksums = map { split /\s+/, $_, 2 } split(/\n/, $out);

      for my $file (@{$package{$pkg}}) {
        # If no checksum found, just treat it as modified
        if (! $rpm_checksums{ $file }) {
          printf $outh "%s%s\n", $type ? 'M ' : '', $file;
          next;
        }
        my $checksum = qx(/usr/bin/md5sum $file);
        chomp $checksum;
        $checksum =~ s/\s.*$//;
        if ($checksum ne $rpm_checksums{ $file }) {
          printf $outh "%s%s\n", $type ? 'M ' : '', $file;
          next;
        }
      }
    }

    # Verify via rpm -V
    else {
      my %files = map { $_ => 1 } @{$package{$pkg}};
      my @cmd = ( @rpm_cmd, $pkg );
      run3(\@cmd, undef, \$out, \$err);

      # Check the output
      if ($out) {
        chomp $out;
        for (split /\n/, $out) {
          my @words = split /\s+/;
          next unless $#words == 2;
          printf $outh "%s%s\n", $type ? 'M ' : '', $words[2] if $files{$words[2]};
        }
      }
    }
  }
}

__END__

=head1 NAME

rpm-find-changes - script to report files in a tree whose contents have changed 
from their rpm versions, or which are not owned by and package. It is intended
to help identify candidate files for backup.

=head1 SYNOPSIS

  rpm-find-changes [-m|-o] [-t] [-v] [<exclude-args>] <path1> [<path2> ...]

=head1 DESCRIPTION

=head2 ARGUMENTS

The following arguments are supported:

=over 4

=item -m | --show-modified

=item -o | --show-orphans

=item -t | --type

Identify the type of each reported file by preceding it with either an 'M',
for modified files, or an 'O', for orphans.

=item -x | --exclude=<file>

=item --exclude-package | --exclude-pkg=<package>

=item --exclude-from=<listfile>

=item -O | --output=<outputfile>

=back

=head1 AUTHOR

Gavin Carr <gavin@openfusion.com.au>.

=head1 COPYRIGHT

Copyright (C) 2007 Gavin Carr. All rights reserved.

This is free software.  You may redistribute copies of it under the  terms  of  the  GNU
General Public License <http://www.gnu.org/licenses/gpl.html>.  There is NO WARRANTY, to
the extent permitted by law.

=cut

